!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDRTEXTLEN	fy_connection.h	33;"	d
CONN_TCP_CLI	fy_connection.h	/^    CONN_TCP_CLI,$/;"	e	enum:__fy_conn_type
CONN_TCP_LSN	fy_connection.h	/^    CONN_TCP_LSN,$/;"	e	enum:__fy_conn_type
CONN_TCP_SRV	fy_connection.h	/^    CONN_TCP_SRV,$/;"	e	enum:__fy_conn_type
CONN_UNIX_CLI	fy_connection.h	/^    CONN_UNIX_CLI,$/;"	e	enum:__fy_conn_type
CONN_UNIX_LSN	fy_connection.h	/^    CONN_UNIX_LSN,$/;"	e	enum:__fy_conn_type
CONN_UNIX_SRV	fy_connection.h	/^    CONN_UNIX_SRV$/;"	e	enum:__fy_conn_type
CONN_UNSET	fy_connection.h	/^    CONN_UNSET = 0,$/;"	e	enum:__fy_conn_type
F	fy_md5.c	49;"	d	file:
FLY_DEFAULT_CONF_FILE	fy_conf.h	7;"	d
FYLOGMAXLINE	fy_logger.c	11;"	d	file:
FY_BRW	modules/fy_fcgi_getinfo_module.c	61;"	d	file:
FY_DEBUG	fy_logger.h	/^    FY_DEBUG = 0,$/;"	e	enum:__fy_log_type
FY_ERROR	fy_logger.h	/^    FY_ERROR,$/;"	e	enum:__fy_log_type
FY_EVERR	fy_event.h	12;"	d
FY_EVHUP	fy_event.h	13;"	d
FY_EVIN	fy_event.h	10;"	d
FY_EVOUT	fy_event.h	11;"	d
FY_INFO	fy_logger.h	/^    FY_INFO,$/;"	e	enum:__fy_log_type
FY_MEMALIGN	fy_alloc.h	17;"	d
FY_MODULE_INIT	fy_framework.h	34;"	d
FY_OS	modules/fy_fcgi_getinfo_module.c	30;"	d	file:
FY_POOLMINSIZE	fy_alloc.c	13;"	d	file:
FY_TASK_INIT	fy_framework.h	22;"	d
FY_TIME_SIZE	fy_time.h	8;"	d
FY_TIME_SIZE_PART	fy_time.h	9;"	d
FY_TIME_SLOTS	fy_time.h	7;"	d
G	fy_md5.c	50;"	d	file:
GET	fy_md5.c	74;"	d	file:
GET	fy_md5.c	83;"	d	file:
H	fy_md5.c	51;"	d	file:
H2	fy_md5.c	52;"	d	file:
I	fy_md5.c	53;"	d	file:
MD5_CTX	fy_md5.h	/^} MD5_CTX;$/;"	t	typeref:struct:__anon1
MD5_Final	fy_md5.c	/^void MD5_Final(unsigned char *result, MD5_CTX *ctx)$/;"	f
MD5_Init	fy_md5.c	/^void MD5_Init(MD5_CTX *ctx)$/;"	f
MD5_Update	fy_md5.c	/^void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)$/;"	f
MD5_u32plus	fy_md5.h	/^typedef unsigned int MD5_u32plus;$/;"	t
RPC_ADIDX_CLI	fy_connection.h	/^    RPC_ADIDX_CLI,$/;"	e	enum:fy_rpc_type
RPC_ADX_CLI	fy_connection.h	/^    RPC_ADX_CLI$/;"	e	enum:fy_rpc_type
RPC_CTIDX_CLI	fy_connection.h	/^    RPC_CTIDX_CLI,$/;"	e	enum:fy_rpc_type
RPC_CTR_CLI	fy_connection.h	/^    RPC_CTR_CLI,$/;"	e	enum:fy_rpc_type
RPC_PA_CLI	fy_connection.h	/^    RPC_PA_CLI,$/;"	e	enum:fy_rpc_type
RPC_UA_CLI	fy_connection.h	/^    RPC_UA_CLI,$/;"	e	enum:fy_rpc_type
RPC_UNSET	fy_connection.h	/^    RPC_UNSET = 0,$/;"	e	enum:fy_rpc_type
SET	fy_md5.c	72;"	d	file:
SET	fy_md5.c	77;"	d	file:
STEP	fy_md5.c	58;"	d	file:
__FY_ALLOC_H__	fy_alloc.h	2;"	d
__FY_CONF_H__	fy_conf.h	2;"	d
__FY_CONNECTION_H__	fy_connection.h	2;"	d
__FY_EVENT_H__	fy_event.h	2;"	d
__FY_FCGI_ACCEPT_MODULE_H__	modules/fy_fcgi_accept_module.h	2;"	d
__FY_FCGI_FINISH_MODULE_H__	modules/fy_fcgi_finish_module.h	2;"	d
__FY_FCGI_GETINFO_H__	modules/fy_fcgi_getinfo_module.h	2;"	d
__FY_FCGI_LAYOUT_H__	modules/fy_fcgi_layout_module.h	2;"	d
__FY_FRAMEWORK_H__	fy_framework.h	2;"	d
__FY_HTTP_LOMARK_MODULE_H__	modules/fy_http_lomark_module.h	2;"	d
__FY_INFO_H__	fy_info.h	2;"	d
__FY_LOGGER_H__	fy_logger.h	2;"	d
__FY_MD5_H__	fy_md5.h	27;"	d
__FY_TIME_H__	fy_time.h	2;"	d
__FY_UTIL_H__	fy_util.h	2;"	d
__fy_conn_type	fy_connection.h	/^typedef enum __fy_conn_type {$/;"	g
__fy_log_fmt	fy_logger.c	/^void __fy_log_fmt(fy_log_type type, const char *file, size_t line, const char *fmt, ...)$/;"	f
__fy_log_type	fy_logger.h	/^typedef enum __fy_log_type {$/;"	g
a	fy_md5.h	/^    MD5_u32plus a, b, c, d;$/;"	m	struct:__anon1
addr	fy_connection.h	/^    struct sockaddr   addr;$/;"	m	struct:fy_connection_t	typeref:struct:fy_connection_t::sockaddr
addr_text	fy_connection.h	/^    char              addr_text[ADDRTEXTLEN];$/;"	m	struct:fy_connection_t
b	fy_md5.h	/^    MD5_u32plus a, b, c, d;$/;"	m	struct:__anon1
before_poll	fy_event.h	/^    void (*before_poll)(fy_event_loop *);$/;"	m	struct:fy_event_loop_t
block	fy_md5.h	/^    MD5_u32plus block[16];$/;"	m	struct:__anon1
body	fy_md5.c	/^static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)$/;"	f	file:
buffer	fy_md5.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon1
c	fy_md5.h	/^    MD5_u32plus a, b, c, d;$/;"	m	struct:__anon1
cln	fy_alloc.c	/^    fy_pool_cln_t       cln;$/;"	m	struct:fy_pool_s	file:
cln	fy_framework.h	/^    void         (*cln)(struct fy_request_t *);$/;"	m	struct:fy_request_t
cln	fy_info.h	/^    void        (*cln)(struct fy_info_t *);$/;"	m	struct:fy_info_t
compeleted	fy_framework.h	/^    compeleted$/;"	e	enum:fy_task_status
conn	fy_event.h	/^    void    *conn;$/;"	m	struct:fy_event_t
conn_type	fy_connection.h	/^    fy_conn_type      conn_type;$/;"	m	struct:fy_connection_t
conns	fy_connection.h	/^    fy_connection    *conns;$/;"	m	struct:fy_conn_pool_t
cur	fy_time.h	/^    time_t   cur;$/;"	m	struct:fy_time_t
current	fy_alloc.c	/^    fy_pool_t          *current;$/;"	m	struct:fy_pool_s	file:
current	fy_info.h	/^    int64_t       current;$/;"	m	struct:fy_info_t
d	fy_md5.h	/^    MD5_u32plus a, b, c, d;$/;"	m	struct:__anon1
data	fy_alloc.c	/^    fy_pool_data_t      data;$/;"	m	struct:fy_pool_s	file:
data	fy_connection.h	/^    void             *data;$/;"	m	struct:fy_connection_t
data	fy_event.h	/^    void    *data;$/;"	m	struct:fy_event_t
data	fy_framework.h	/^    void                  *data;$/;"	m	struct:fy_module_t
end	fy_alloc.c	/^    char        *end;       \/* end of current pool *\/$/;"	m	struct:fy_pool_data_s	file:
err_list	fy_connection.h	/^    fy_connection    *err_list;$/;"	m	struct:fy_conn_pool_t
event_heap	fy_event.h	/^    fy_event    **event_heap;$/;"	m	struct:fy_event_loop_t
fail	fy_alloc.c	/^    short        fail;$/;"	m	struct:fy_pool_data_s	file:
fcgi_request	fy_framework.h	/^    FCGX_Request  *fcgi_request;$/;"	m	struct:fy_request_t
fd	fy_connection.h	/^    int               fd;$/;"	m	struct:fy_connection_t
free_list	fy_connection.h	/^    fy_connection    *free_list;$/;"	m	struct:fy_conn_pool_t
free_size	fy_connection.h	/^    size_t            free_size;$/;"	m	struct:fy_conn_pool_t
fy_align	fy_alloc.h	18;"	d
fy_atoi	fy_util.c	/^int fy_atoi(const char *ptr)$/;"	f
fy_atoi_n	fy_util.c	/^int fy_atoi_n(const char *ptr, size_t n)$/;"	f
fy_check_mode	fy_framework.c	/^static int fy_check_mode = 0;$/;"	v	file:
fy_conf_get_param	fy_conf.c	/^const char *fy_conf_get_param(const char *key)$/;"	f
fy_conf_init	fy_conf.c	/^int fy_conf_init(const char *path)$/;"	f
fy_conf_initialized	fy_conf.c	/^static int fy_conf_initialized = 0;$/;"	v	file:
fy_conf_tree	fy_conf.c	/^static mxml_node_t *fy_conf_tree;$/;"	v	file:
fy_conn_pool	fy_connection.h	/^typedef struct fy_conn_pool_t fy_conn_pool;$/;"	t	typeref:struct:fy_conn_pool_t
fy_conn_pool_t	fy_connection.h	/^struct fy_conn_pool_t {$/;"	s
fy_conn_type	fy_connection.h	/^} fy_conn_type;$/;"	t	typeref:enum:__fy_conn_type
fy_connection	fy_connection.h	/^typedef struct fy_connection_t fy_connection;$/;"	t	typeref:struct:fy_connection_t
fy_connection_t	fy_connection.h	/^struct fy_connection_t {$/;"	s
fy_create_conn_pool	fy_connection.c	/^fy_conn_pool *fy_create_conn_pool(fy_pool_t *mem_pool, size_t pool_size, size_t max_load)$/;"	f
fy_create_event_loop	fy_event.c	/^fy_event_loop *fy_create_event_loop(fy_pool_t *pool, size_t poll_size)$/;"	f
fy_cur_msec	fy_time.c	/^inline time_t fy_cur_msec()$/;"	f
fy_cur_sec	fy_time.c	/^inline time_t fy_cur_sec()$/;"	f
fy_cur_time_str	fy_time.c	/^inline const char *fy_cur_time_str()$/;"	f
fy_current	fy_time.c	/^inline time_t fy_current()$/;"	f
fy_debug_log_fd	fy_logger.c	/^static int fy_debug_log_fd;$/;"	v	file:
fy_debug_log_path	fy_framework.c	/^static const char *fy_debug_log_path;$/;"	v	file:
fy_err_log_fd	fy_logger.c	/^static int fy_err_log_fd;$/;"	v	file:
fy_error_log_path	fy_framework.c	/^static const char *fy_error_log_path;$/;"	v	file:
fy_event	fy_event.h	/^typedef struct fy_event_t fy_event;$/;"	t	typeref:struct:fy_event_t
fy_event_add	fy_event.c	/^int fy_event_add(void *conn, void *loop, __uint32_t events)$/;"	f
fy_event_del	fy_event.c	/^int fy_event_del(void *conn, void *loop)$/;"	f
fy_event_loop	fy_event.h	/^typedef struct fy_event_loop_t fy_event_loop;$/;"	t	typeref:struct:fy_event_loop_t
fy_event_loop_t	fy_event.h	/^struct fy_event_loop_t {$/;"	s
fy_event_mod	fy_event.c	/^int fy_event_mod(void *conn, void *loop, __uint32_t events)$/;"	f
fy_event_regist	fy_event.c	/^static int fy_event_regist(void *conn, void *loop, __uint32_t events, int op)$/;"	f	file:
fy_event_t	fy_event.h	/^struct fy_event_t {$/;"	s
fy_fcgi_accept_module	modules/fy_fcgi_accept_module.c	/^fy_module fy_fcgi_accept_module = {$/;"	v
fy_fcgi_accept_module_init	modules/fy_fcgi_accept_module.c	/^static int fy_fcgi_accept_module_init(fy_module *module, void *ptr)$/;"	f	file:
fy_fcgi_accept_read_handler	modules/fy_fcgi_accept_module.c	/^static int fy_fcgi_accept_read_handler(fy_event *ev, void *ptr)$/;"	f	file:
fy_fcgi_accept_task	modules/fy_fcgi_accept_module.c	/^static fy_task fy_fcgi_accept_task = {$/;"	v	file:
fy_fcgi_accept_task_submit	modules/fy_fcgi_accept_module.c	/^static int fy_fcgi_accept_task_submit(fy_task *task, void *request)$/;"	f	file:
fy_fcgi_accept_tasks	modules/fy_fcgi_accept_module.c	/^static fy_task *fy_fcgi_accept_tasks[] = {$/;"	v	file:
fy_fcgi_finish_module	modules/fy_fcgi_finish_module.c	/^fy_module fy_fcgi_finish_module = {$/;"	v
fy_fcgi_finish_task	modules/fy_fcgi_finish_module.c	/^static fy_task fy_fcgi_finish_task = {$/;"	v	file:
fy_fcgi_finish_task_submit	modules/fy_fcgi_finish_module.c	/^static int fy_fcgi_finish_task_submit(fy_task *task, void *request)$/;"	f	file:
fy_fcgi_finish_tasks	modules/fy_fcgi_finish_module.c	/^static fy_task *fy_fcgi_finish_tasks[] = {$/;"	v	file:
fy_fcgi_get_param	modules/fy_fcgi_getinfo_module.c	/^static char *fy_fcgi_get_param(const char *key, fy_request *r)$/;"	f	file:
fy_fcgi_getinfo_module	modules/fy_fcgi_getinfo_module.c	/^fy_module fy_fcgi_getinfo_module = {$/;"	v
fy_fcgi_getinfo_task	modules/fy_fcgi_getinfo_module.c	/^static fy_task fy_fcgi_getinfo_task = {$/;"	v	file:
fy_fcgi_getinfo_task_submit	modules/fy_fcgi_getinfo_module.c	/^static int fy_fcgi_getinfo_task_submit(fy_task *task, void *request)$/;"	f	file:
fy_fcgi_getinfo_tasks	modules/fy_fcgi_getinfo_module.c	/^static fy_task *fy_fcgi_getinfo_tasks[] = {$/;"	v	file:
fy_fcgi_layout_module	modules/fy_fcgi_layout_module.c	/^fy_module fy_fcgi_layout_module = {$/;"	v
fy_fcgi_layout_module_init	modules/fy_fcgi_layout_module.c	/^static int fy_fcgi_layout_module_init(fy_module *m, void *data){$/;"	f	file:
fy_fcgi_layout_task	modules/fy_fcgi_layout_module.c	/^static fy_task fy_fcgi_layout_task = {$/;"	v	file:
fy_fcgi_layout_task_submit	modules/fy_fcgi_layout_module.c	/^static int fy_fcgi_layout_task_submit(fy_task *task, void *request)$/;"	f	file:
fy_fcgi_layout_tasks	modules/fy_fcgi_layout_module.c	/^static fy_task *fy_fcgi_layout_tasks[] = {$/;"	v	file:
fy_get_browser	modules/fy_fcgi_getinfo_module.c	/^static char *fy_get_browser(const char *p)$/;"	f	file:
fy_get_os	modules/fy_fcgi_getinfo_module.c	/^static char *fy_get_os(const char *p)$/;"	f	file:
fy_http_lomark_module	modules/fy_http_lomark_module.c	/^static fy_module fy_http_lomark_module = {$/;"	v	file:
fy_http_lomark_task	modules/fy_http_lomark_module.c	/^static fy_task fy_http_lomark_task = {$/;"	v	file:
fy_http_lomark_tasks	modules/fy_http_lomark_module.c	/^static fy_task *fy_http_lomark_tasks[] = {$/;"	v	file:
fy_info	fy_info.h	/^typedef struct fy_info_t fy_info;$/;"	t	typeref:struct:fy_info_t
fy_info_cleanup	fy_info.c	/^static void fy_info_cleanup(fy_info *info)$/;"	f	file:
fy_info_create	fy_info.c	/^fy_info *fy_info_create(fy_pool_t *pool)$/;"	f
fy_info_log_fd	fy_logger.c	/^static int fy_info_log_fd;$/;"	v	file:
fy_info_log_path	fy_framework.c	/^static const char *fy_info_log_path;$/;"	v	file:
fy_info_t	fy_info.h	/^struct fy_info_t {$/;"	s
fy_init	fy_alloc.c	/^static void fy_init()$/;"	f	file:
fy_initialized	fy_alloc.c	/^static int fy_initialized = 0;$/;"	v	file:
fy_log_debug	fy_logger.h	16;"	d
fy_log_error	fy_logger.h	18;"	d
fy_log_info	fy_logger.h	17;"	d
fy_log_init	fy_logger.c	/^int fy_log_init(fy_log_type type, const char *path)$/;"	f
fy_log_type	fy_logger.h	/^} fy_log_type;$/;"	t	typeref:enum:__fy_log_type
fy_main_loop	fy_event.c	/^void fy_main_loop(fy_event_loop *loop)$/;"	f
fy_md5_ctx	fy_md5.h	/^typedef MD5_CTX fy_md5_ctx;$/;"	t
fy_md5_final	fy_md5.h	46;"	d
fy_md5_init	fy_md5.h	44;"	d
fy_md5_update	fy_md5.h	45;"	d
fy_mem_pool	fy_framework.c	/^fy_pool_t *fy_mem_pool;$/;"	v
fy_memalign	fy_alloc.c	/^static void *fy_memalign(size_t boundary, size_t size)$/;"	f	file:
fy_mod_root	fy_conf.c	/^static mxml_node_t *fy_mod_root;$/;"	v	file:
fy_module	fy_framework.h	/^typedef struct fy_module_t fy_module;$/;"	t	typeref:struct:fy_module_t
fy_module_conf_begin	fy_conf.c	/^int fy_module_conf_begin(fy_module *m)$/;"	f
fy_module_conf_end	fy_conf.c	/^int fy_module_conf_end(fy_module *m)$/;"	f
fy_module_display	fy_framework.c	/^void fy_module_display()$/;"	f
fy_module_display_no_null	fy_framework.c	/^void fy_module_display_no_null()$/;"	f
fy_module_init	fy_framework.c	/^void fy_module_init(void *data)$/;"	f
fy_module_size	fy_framework.c	/^static size_t fy_module_size;$/;"	v	file:
fy_module_t	fy_framework.h	/^struct fy_module_t {$/;"	s
fy_modules	fy_modules.c	/^fy_module *fy_modules[] = {$/;"	v
fy_pagesize	fy_alloc.c	/^static size_t fy_pagesize;$/;"	v	file:
fy_poll_size	fy_framework.c	/^static size_t fy_poll_size;$/;"	v	file:
fy_pool_alloc	fy_alloc.c	/^void *fy_pool_alloc(fy_pool_t *pool, size_t size)$/;"	f
fy_pool_alloc_block	fy_alloc.c	/^static void *fy_pool_alloc_block(fy_pool_t *pool, size_t size)$/;"	f	file:
fy_pool_alloc_large	fy_alloc.c	/^static void *fy_pool_alloc_large(fy_pool_t *p, size_t size)$/;"	f	file:
fy_pool_cln_t	fy_alloc.h	/^typedef void (*fy_pool_cln_t)(void *);$/;"	t
fy_pool_create	fy_alloc.c	/^fy_pool_t *fy_pool_create(size_t size)$/;"	f
fy_pool_data_s	fy_alloc.c	/^struct fy_pool_data_s {$/;"	s	file:
fy_pool_data_t	fy_alloc.h	/^typedef struct fy_pool_data_s  fy_pool_data_t;$/;"	t	typeref:struct:fy_pool_data_s
fy_pool_destroy	fy_alloc.c	/^void fy_pool_destroy(fy_pool_t *p)$/;"	f
fy_pool_large_s	fy_alloc.c	/^struct fy_pool_large_s {$/;"	s	file:
fy_pool_large_t	fy_alloc.h	/^typedef struct fy_pool_large_s fy_pool_large_t;$/;"	t	typeref:struct:fy_pool_large_s
fy_pool_s	fy_alloc.c	/^struct fy_pool_s {$/;"	s	file:
fy_pool_t	fy_alloc.h	/^typedef struct fy_pool_s       fy_pool_t;$/;"	t	typeref:struct:fy_pool_s
fy_pop_connection	fy_connection.c	/^fy_connection *fy_pop_connection(fy_conn_pool *pool)$/;"	f
fy_pop_err_conn	fy_connection.c	/^fy_connection *fy_pop_err_conn(fy_conn_pool *pool)$/;"	f
fy_process_events	fy_event.c	/^static int fy_process_events(fy_event_loop *loop)$/;"	f	file:
fy_push_connection	fy_connection.c	/^void fy_push_connection(fy_conn_pool *pool, fy_connection *conn)$/;"	f
fy_push_err_conn	fy_connection.c	/^void fy_push_err_conn(fy_conn_pool *pool, fy_connection *conn)$/;"	f
fy_request	fy_framework.h	/^typedef struct fy_request_t fy_request;$/;"	t	typeref:struct:fy_request_t
fy_request_cleanup	fy_framework.c	/^static void fy_request_cleanup(fy_request *r)$/;"	f	file:
fy_request_create	fy_framework.c	/^fy_request *fy_request_create(fy_pool_t *pool)$/;"	f
fy_request_next_module	fy_framework.c	/^void fy_request_next_module(fy_request *r)$/;"	f
fy_request_run	fy_framework.c	/^static void fy_request_run(fy_request *r)$/;"	f	file:
fy_request_t	fy_framework.h	/^struct fy_request_t {$/;"	s
fy_rpc_type	fy_connection.h	/^typedef enum fy_rpc_type {$/;"	g
fy_rpc_type	fy_connection.h	/^} fy_rpc_type;$/;"	t	typeref:enum:fy_rpc_type
fy_submit_subtask	fy_framework.c	/^void fy_submit_subtask(fy_task *task, fy_request *r)$/;"	f
fy_task	fy_framework.h	/^typedef struct fy_task_t fy_task;$/;"	t	typeref:struct:fy_task_t
fy_task_display	fy_framework.c	/^static void fy_task_display(fy_task *task, size_t level)$/;"	f	file:
fy_task_display_no_null	fy_framework.c	/^static void fy_task_display_no_null(char *pre, size_t pre_size,$/;"	f	file:
fy_task_init	fy_framework.c	/^static void fy_task_init(fy_task *task, fy_module *module)$/;"	f	file:
fy_task_status	fy_framework.h	/^enum fy_task_status {$/;"	g
fy_task_t	fy_framework.h	/^struct fy_task_t {$/;"	s
fy_time	fy_time.h	/^static volatile struct fy_time_t fy_time;$/;"	v	typeref:struct:fy_time_t
fy_time_fmt	fy_time.h	/^static const char fy_time_fmt[] = "%04d-%02d-%02d %02d:%02d:%02d %03ld ";$/;"	v
fy_time_init	fy_time.c	/^void fy_time_init()$/;"	f
fy_time_mutex	fy_time.h	/^static pthread_mutex_t fy_time_mutex;$/;"	v
fy_time_str	fy_time.h	/^static char fy_time_str[FY_TIME_SLOTS][FY_TIME_SIZE];$/;"	v
fy_time_t	fy_time.h	/^struct fy_time_t {$/;"	s
fy_time_update	fy_time.c	/^void fy_time_update()$/;"	f
fy_time_update_signal	fy_time.c	/^static void fy_time_update_signal(int signum)$/;"	f	file:
fy_url_decode	fy_util.c	/^size_t fy_url_decode(const char *e, size_t e_size, char *d, size_t d_size)$/;"	f
fy_util_init	fy_util.c	/^static int fy_util_init = 0;$/;"	v	file:
fy_util_initialize	fy_util.c	/^static void fy_util_initialize()$/;"	f	file:
handler	fy_event.h	/^    int (*handler)(struct fy_event_t *, void *);$/;"	m	struct:fy_event_t
heap_size	fy_event.h	/^    size_t        heap_size;    \/* numbers of connections in poll *\/$/;"	m	struct:fy_event_loop_t
hex2ch	fy_util.c	/^static char hex2ch[256][256];$/;"	v	file:
hi	fy_md5.h	/^    MD5_u32plus lo, hi;$/;"	m	struct:__anon1
info	fy_framework.h	/^    fy_info       *info;$/;"	m	struct:fy_request_t
large	fy_alloc.c	/^    fy_pool_large_t    *large;$/;"	m	struct:fy_pool_s	file:
last	fy_alloc.c	/^    char        *last;      \/* last position of alloced data *\/$/;"	m	struct:fy_pool_data_s	file:
lo	fy_md5.h	/^    MD5_u32plus lo, hi;$/;"	m	struct:__anon1
load	fy_connection.h	/^    size_t            load;$/;"	m	struct:fy_connection_t
main	fy_framework.c	/^int main(int argc, char *argv[])$/;"	f
max	fy_alloc.c	/^    size_t              max;     \/* max data can alloc from pool *\/$/;"	m	struct:fy_pool_s	file:
max_load	fy_connection.h	/^    size_t            max_load;$/;"	m	struct:fy_connection_t
module	fy_framework.h	/^    fy_module        *module;$/;"	m	struct:fy_task_t
module	fy_framework.h	/^    fy_module     *module;$/;"	m	struct:fy_request_t
module_conf	fy_framework.h	/^    int (*module_conf)(fy_module *, void *);$/;"	m	struct:fy_module_t
module_init	fy_framework.h	/^    int (*module_init)(fy_module *, void *);$/;"	m	struct:fy_module_t
module_name	fy_framework.h	/^    char                  *module_name;$/;"	m	struct:fy_module_t
msec	fy_time.h	/^    time_t   msec;$/;"	m	struct:fy_time_t
next	fy_alloc.c	/^    fy_pool_large_t   *next;$/;"	m	struct:fy_pool_large_s	file:
next	fy_alloc.c	/^    fy_pool_t   *next;$/;"	m	struct:fy_pool_data_s	file:
next	fy_connection.h	/^    fy_connection    *next;$/;"	m	struct:fy_connection_t
next	fy_framework.h	/^    struct fy_module_t    *next;$/;"	m	struct:fy_module_t	typeref:struct:fy_module_t::fy_module_t
null_module	fy_framework.c	/^fy_module null_module = {$/;"	v
null_task	fy_framework.c	/^fy_task null_task = {$/;"	v
null_task_list	fy_framework.c	/^fy_task *null_task_list[] = { &null_task };$/;"	v
poll_events	fy_event.h	/^    void         *poll_events;$/;"	m	struct:fy_event_loop_t
poll_fd	fy_event.h	/^    int           poll_fd;$/;"	m	struct:fy_event_loop_t
poll_size	fy_event.h	/^    size_t        poll_size;$/;"	m	struct:fy_event_loop_t
poll_timeout	fy_event.h	/^    int           poll_timeout;$/;"	m	struct:fy_event_loop_t
pool	fy_connection.h	/^    fy_conn_pool     *pool;$/;"	m	struct:fy_connection_t
pool	fy_framework.h	/^    fy_pool_t             *pool;$/;"	m	struct:fy_module_t
pool	fy_framework.h	/^    fy_pool_t     *pool;$/;"	m	struct:fy_request_t
port	fy_connection.h	/^    int               port;$/;"	m	struct:fy_connection_t
prev	fy_connection.h	/^    fy_connection   **prev;$/;"	m	struct:fy_connection_t
ptr	fy_alloc.c	/^    void              *ptr;$/;"	m	struct:fy_pool_large_s	file:
ready	fy_framework.h	/^    ready = 0,$/;"	e	enum:fy_task_status
req_type	fy_info.h	/^    int           req_type;$/;"	m	struct:fy_info_t
request	fy_connection.h	/^    void             *request;$/;"	m	struct:fy_connection_t
res_type	fy_info.h	/^    int           res_type;$/;"	m	struct:fy_info_t
revent	fy_connection.h	/^    fy_event         *revent;$/;"	m	struct:fy_connection_t
revents	fy_connection.h	/^    fy_event         *revents;$/;"	m	struct:fy_conn_pool_t
rpc_type	fy_connection.h	/^    fy_rpc_type       rpc_type;$/;"	m	struct:fy_connection_t
running	fy_framework.h	/^    running,$/;"	e	enum:fy_task_status
sec	fy_time.h	/^    time_t   sec;$/;"	m	struct:fy_time_t
size	fy_alloc.c	/^    size_t             size;$/;"	m	struct:fy_pool_large_s	file:
size	fy_connection.h	/^    size_t            size;$/;"	m	struct:fy_conn_pool_t
size_t	fy_alloc.h	/^typedef unsigned long size_t;$/;"	t
slot	fy_time.h	/^    size_t   slot;$/;"	m	struct:fy_time_t
socklen	fy_connection.h	/^    socklen_t         socklen;$/;"	m	struct:fy_connection_t
stop	fy_event.h	/^    int           stop;$/;"	m	struct:fy_event_loop_t
sub_task_size	fy_framework.h	/^    size_t            sub_task_size;$/;"	m	struct:fy_task_t
sub_tasks	fy_framework.h	/^    fy_task         **sub_tasks;$/;"	m	struct:fy_task_t
task_completes	fy_framework.h	/^    size_t         task_completes;$/;"	m	struct:fy_request_t
task_name	fy_framework.h	/^    char             *task_name;$/;"	m	struct:fy_task_t
task_size	fy_framework.h	/^    size_t                 task_size;$/;"	m	struct:fy_module_t
task_submit	fy_framework.h	/^    int             (*task_submit)(fy_task *, void *);$/;"	m	struct:fy_task_t
task_total	fy_framework.h	/^    size_t                 task_total;$/;"	m	struct:fy_module_t
tasks	fy_framework.h	/^    fy_task              **tasks;$/;"	m	struct:fy_module_t
wevent	fy_connection.h	/^    fy_event         *wevent;$/;"	m	struct:fy_connection_t
wevents	fy_connection.h	/^    fy_event         *wevents;$/;"	m	struct:fy_conn_pool_t
